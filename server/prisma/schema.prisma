generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model Account {
    id                    Int              @id @default(autoincrement())
    //  uuid              String           @default(uuid()) // @db.Uuid
    email                 String?
    password              String?
    role                  String?          @default("user")
    banned                Boolean?         @default(false)
    wallet                Wallet?          @relation(fields: [walletId], references: [id])
    walletId              Int?             @unique
    telegramAccount       TelegramAccount? @relation(fields: [telegramAccountId], references: [id])
    telegramAccountId     Int?             @unique
    telegramAccountChatId Int?
    createdAt             DateTime?
    updatedAt             DateTime?
}

model TelegramAccount {
    id        Int       @id @default(autoincrement())
    chatId    Int       @unique
    username  String?
    firstName String?
    banned    Boolean?  @default(false)
    account   Account?
    createdAt DateTime?
    updatedAt DateTime?
}

model Wallet {
    id            Int            @id @default(autoincrement())
    //  uuid          String         @unique
    account       Account?
    cryptoWallets CryptoWallet[]
    createdAt     DateTime?
    updatedAt     DateTime?
}

model CryptoWallet {
    id           Int           @id @default(autoincrement())
    //  uuid          String         @unique
    address      String        @unique
    privateKey   String
    balance      Float?        @default(0)
    symbol       String?
    wallet       Wallet        @relation(fields: [walletId], references: [id])
    walletId     Int
    token        Token?        @relation(fields: [tokenId], references: [id])
    tokenId      Int?
    transactions Transaction[]
    createdAt    DateTime?
    updatedAt    DateTime?
}

model Token {
    id              Int            @id @default(autoincrement())
    //  uuid          String         @unique
    symbol          String
    contractAddress String?
    feeAddress      String
    transactionFee  Float?         @default(0.0)
    withdrawFee     Float?         @default(0.0)
    depositFee      Float?         @default(0.0)
    raindropFee     Float?         @default(0.0)
    cryptoWallets   CryptoWallet[]
    createdAt       DateTime?
    updatedAt       DateTime?
}

model Transaction {
    id               Int             @id @default(autoincrement())
    //  uuid          String         @unique
    type             String?         @default("TRANSACTION")
    value            Int
    from             String
    to               String
    hash             String
    gasUsed          Float?
    explorerLink     String?
    cryptoWallet     CryptoWallet?   @relation(fields: [cryptoWalletId], references: [id])
    cryptoWalletId   Int?
    transactionFee   TransactionFee? @relation(fields: [transactionFeeId], references: [id])
    transactionFeeId Int             @unique
    createdAt        DateTime?
    updatedAt        DateTime?
}

model TransactionFee {
    id          Int          @id @default(autoincrement())
    //  uuid          String         @unique
    status      String?
    value       Int          @default(0)
    transaction Transaction?
    createdAt   DateTime?
    updatedAt   DateTime?
}
