generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                    String           @id @default(uuid()) @db.Uuid
    email                 String?
    password              String?
    role                  String?          @default("user")
    isBlocked             Boolean?         @default(false)
    wallet                Wallet           @relation(fields: [walletId], references: [id])
    walletId              String           @unique @db.Uuid
    telegramAccount       TelegramAccount? @relation(fields: [telegramAccountId], references: [id])
    telegramAccountId     Int?             @unique
    telegramAccountChatId Int?
    createdAt             DateTime?
    updatedAt             DateTime?        @default(dbgenerated("now()"))
}

model TelegramAccount {
    id        Int      @id @unique
    username  String?
    firstName String?
    language  String?  @default("en")
    account   Account?
}

model Wallet {
    id            String            @id @default(uuid()) @db.Uuid
    account       Account?
    cryptoWallets CryptoWallet[]
    exchanges     ExchangeRequest[]
    createdAt     DateTime?
    updatedAt     DateTime?         @default(dbgenerated("now()"))
}

model CryptoWallet {
    id           String        @id @default(uuid()) @db.Uuid
    address      String        @unique
    privateKey   String
    balance      Float?        @default(0)
    symbol       String?
    wallet       Wallet        @relation(fields: [walletId], references: [id])
    walletId     String        @db.Uuid
    token        Token?        @relation(fields: [tokenId], references: [id])
    tokenId      String?       @db.Uuid
    transactions Transaction[]
    createdAt    DateTime?
    updatedAt    DateTime?     @default(dbgenerated("now()"))
}

model Token {
    id              String         @id @default(uuid()) @db.Uuid
    symbol          String
    contractAddress String?
    cryptoWallets   CryptoWallet[]
    transactionFee  Float?         @default(0)
    withdrawalFee   Float?         @default(0)
    exchangeFee     Float?         @default(0)
    raindropFee     Float?         @default(0)
    feeAddress      String?
    createdAt       DateTime?
    updatedAt       DateTime?      @default(dbgenerated("now()"))
}

model Transaction {
    id             String        @id @default(uuid()) @db.Uuid
    status         String?       @default("pending")
    value          Int
    from           String
    to             String
    hash           String?
    fee            Float?        @default(0)
    serviceFee     ServiceFee?   @relation(fields: [serviceFeeId], references: [id])
    serviceFeeId   String?       @unique @db.Uuid
    cryptoWallet   CryptoWallet? @relation(fields: [cryptoWalletId], references: [id])
    cryptoWalletId String?       @db.Uuid
    explorerLink   String?
    createdAt      DateTime?
    updatedAt      DateTime?     @default(dbgenerated("now()"))
}

model ServiceFee {
    id          String       @id @default(uuid()) @db.Uuid
    status      String?
    value       Int          @default(0)
    transaction Transaction?
}

model ExchangeRequest {
    id        Int       @id @default(autoincrement())
    tokenA    String
    tokenB    String
    value     Int
    from      String
    to        String
    wallet    Wallet    @relation(fields: [walletId], references: [id])
    walletId  String    @db.Uuid
    createdAt DateTime?
    updatedAt DateTime? @default(dbgenerated("now()"))
}
