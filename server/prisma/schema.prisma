generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                Int              @id @default(autoincrement())
  //  uuid              String           @default(uuid()) // @db.Uuid
  email             String?
  password          String?
  role              String?          @default("user")
  banned            Boolean?         @default(false)
  wallet            Wallet?          @relation(fields: [walletId], references: [id])
  walletId          Int?             @unique
  telegramAccount   TelegramAccount? @relation(fields: [telegramAccountId], references: [id])
  telegramAccountId Int?             @unique
  createdAt         DateTime?
  updatedAt         DateTime?
}

model TelegramAccount {
  id        Int       @id @default(autoincrement())
  chatId    Int       @unique
  username  String?
  firstName String?
  account   Account?
  createdAt DateTime?
  updatedAt DateTime?
}

model Wallet {
  id            Int            @id @default(autoincrement())
  //  uuid          String         @unique
  account       Account?
  cryptoWallets CryptoWallet[]
  createdAt     DateTime?
  updatedAt     DateTime?
}

model CryptoWallet {
  id           Int           @id @default(autoincrement())
  address      String
  wallet       Wallet?       @relation(fields: [walletId], references: [id])
  walletId     Int?
  token        Token?        @relation(fields: [tokenId], references: [id])
  tokenId      Int?
  transactions Transaction[]
  createdAt    DateTime?
  updatedAt    DateTime?
}

model Token {
  id           Int            @id @default(autoincrement())
  address      String
  cryptoWallet CryptoWallet[]
  createdAt    DateTime?
  updatedAt    DateTime?
}

model Transaction {
  id             Int           @id @default(autoincrement())
  hash           String
  from           String
  to             String
  cryptoWallet   CryptoWallet? @relation(fields: [cryptoWalletId], references: [id])
  cryptoWalletId Int?
  createdAt      DateTime?
  updatedAt      DateTime?
}
